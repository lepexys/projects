Язык регистро-независим. Синтаксис — алголоподобный, в духе языков конца 1970-х годов: все управляющие конструкции, начинающиеся на ключевое слово, заканчиваются ключевым словом и позволяют размещать внутри любое число операторов, что устраняет часто критикуемый недостаток, свойственный Алголу-60 и Паскалю: необходимость частого использования «операторных скобок» begin-end. Детали синтаксиса разработаны так, чтобы снизить вероятность случайных ошибок. Например, в идентификаторах запрещено использовать несколько знаков подчёркивания подряд. Завершающие ключевые слова для разных управляющих конструкций различны: условный оператор if заканчивается комбинацией end if, циклы — комбинацией end loop, оператор множественного выбора — end case и т. д. На уровне синтаксиса языка поддерживается структурная обработка исключений.

Язык имеет развитую систему типов, как встроенных, так и порождаемых программистом. Есть множество способов создания новых типов, язык поддерживает два разных понятия: «подтип» и «производный тип». Переменные типа и подтипа совместимы, переменные типа и его производного типа — нет.

В процедурах и функциях поддерживаются входные и выходные параметры, передача параметров по имени, параметры со значениями по умолчанию. Поддерживается переопределение процедур, функций и операторов — создание нескольких вариантов процедуры, функции или оператора с одним и тем же именем, но различными сигнатурами (типами и количеством параметров).

Программы — модульные, механизм контроля импорта-экспорта описаний между модулями включает две разные директивы: одну для подключения другого модуля (with), другую — для импорта его описаний (use). Также существует возможность переименовать модуль при импорте (rename) — этот вариант позволяет использовать для обозначения пакета более удобные программисту идентификаторы. Пакеты (один из типов модулей) могут содержать заголовок и приватную часть — то, что содержится в ней, не экспортируется и другим модулям недоступно. Поддерживается механизм обобщённых (generic) модулей: пакетов, процедур и функций, позволяющих описывать алгоритмы обработки данных без указания конкретного типа.

В язык встроены конструкции поддержки параллельного программирования: поддерживаются понятия «задача» (параллельно выполняемый фрагмент программы), «вход задачи» (средство синхронизации и коммуникации параллельно выполняющихся задач), поддерживается механизм «рандеву» (протокол взаимодействия параллельно выполняемых задач через вход одной из них), имеется оператор выбора SELECT для организации условного межпотокового взаимодействия (выбора параллельной задачи, с которой следует взаимодействовать, в зависимости от готовности к рандеву и некоторых других условий). В принципе, имеющихся в языке средств параллельного программирования достаточно для решения большого класса задач, требующих параллельной обработки, без обращения к внешним средствам, таким как дополнительные библиотеки или API операционной системы.